import os
import json
import time
from datetime import datetime
from urllib.parse import quote_plus
from apscheduler.schedulers.blocking import BlockingScheduler
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from bs4 import BeautifulSoup
from telegram import Bot
import logging

# Thi·∫øt l·∫≠p logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# Bi·∫øn m√¥i tr∆∞·ªùng
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
CHAT_ID = os.getenv('CHAT_ID')
CHECK_INTERVAL_MINUTES = int(os.getenv('CHECK_INTERVAL_MINUTES', 10))
RENDER = os.getenv('RENDER', 'false').lower() == 'true'

# ƒê∆∞·ªùng d·∫´n l∆∞u tr·ªØ d·ªØ li·ªáu
BIDDINGS_FILE = 'biddings.json'
NOTIFIED_BIDDINGS_FILE = 'notified_biddings.json'

# H√†m ki·ªÉm tra khung gi·ªù l√†m vi·ªác
def is_within_working_hours():
    now = datetime.now()
    hour = now.hour
    return 8 <= hour < 20  # True n·∫øu trong 8:00 - 19:59

# H√†m x√¢y d·ª±ng URL t√¨m ki·∫øm
def build_bidding_url():
    sfrom = quote_plus('15/08/2025')  # Ng√†y b·∫Øt ƒë·∫ßu t√¨m ki·∫øm
    keyword = quote_plus('Chi·∫øu s√°ng')
    return f"https://dauthau.asia/tenders/?sfrom={sfrom}&keyword={keyword}"

# H√†m ki·ªÉm tra g√≥i th·∫ßu
def check_biddings():
    logger.info("B·∫Øt ƒë·∫ßu ki·ªÉm tra g√≥i th·∫ßu...")
    
    # Thi·∫øt l·∫≠p Selenium
    chrome_options = Options()
    chrome_options.add_argument('--headless')
    chrome_options.add_argument('--no-sandbox')
    chrome_options.add_argument('--disable-dev-shm-usage')
    
    driver = webdriver.Chrome(options=chrome_options)
    url = build_bidding_url()
    
    try:
        driver.get(url)
        time.sleep(5)  # ƒê·ª£i trang t·∫£i
        soup = BeautifulSoup(driver.page_source, 'lxml')
        
        # Gi·∫£ ƒë·ªãnh c·∫•u tr√∫c HTML c·ªßa dauthau.asia
        biddings = []
        bidding_elements = soup.select('div.bidding-item')  # C·∫ßn ƒëi·ªÅu ch·ªânh selector
        
        for elem in bidding_elements:
            bidding = {
                'id': elem.get('data-id', ''),
                'title': elem.select_one('h3').text.strip() if elem.select_one('h3') else '',
                'issuer': elem.select_one('.issuer').text.strip() if elem.select_one('.issuer') else '',
                'published_date': elem.select_one('.published-date').text.strip() if elem.select_one('.published-date') else '',
                'closing_date': elem.select_one('.closing-date').text.strip() if elem.select_one('.closing-date') else '',
                'link': elem.select_one('a')['href'] if elem.select_one('a') else ''
            }
            biddings.append(bidding)
        
        # L∆∞u danh s√°ch g√≥i th·∫ßu
        with open(BIDDINGS_FILE, 'w', encoding='utf-8') as f:
            json.dump(biddings, f, ensure_ascii=False, indent=2)
        
        # ƒê·ªçc danh s√°ch ƒë√£ th√¥ng b√°o
        notified_biddings = []
        if os.path.exists(NOTIFIED_BIDDINGS_FILE):
            with open(NOTIFIED_BIDDINGS_FILE, 'r', encoding='utf-8') as f:
                notified_biddings = json.load(f)
        
        notified_ids = {b['id'] for b in notified_biddings}
        new_biddings = [b for b in biddings if b['id'] not in notified_ids]
        
        # G·ª≠i th√¥ng b√°o cho g√≥i th·∫ßu m·ªõi
        if new_biddings:
            bot = Bot(token=TELEGRAM_TOKEN)
            message = "üîî PH√ÅT HI·ªÜN {} G√ìI TH·∫¶U M·ªöI\n".format(len(new_biddings))
            for i, bidding in enumerate(new_biddings, 1):
                message += (
                    f"{i}. üÜî {bidding['id']}\n"
                    f"üì¶ {bidding['title']}\n"
                    f"üè¢ B√™n m·ªùi th·∫ßu: {bidding['issuer']}\n"
                    f"üìÖ Ng√†y ƒëƒÉng: {bidding['published_date']}\n"
                    f"‚è∞ Ng√†y ƒë√≥ng th·∫ßu: {bidding['closing_date']}\n"
                    f"üîó [Xem chi ti·∫øt]({bidding['link']})\n\n"
                )
            bot.send_message(chat_id=CHAT_ID, text=message, parse_mode='Markdown')
            
            # C·∫≠p nh·∫≠t danh s√°ch ƒë√£ th√¥ng b√°o
            notified_biddings.extend(new_biddings)
            with open(NOTIFIED_BIDDINGS_FILE, 'w', encoding='utf-8') as f:
                json.dump(notified_biddings, f, ensure_ascii=False, indent=2)
        
        logger.info(f"T√¨m th·∫•y {len(new_biddings)} g√≥i th·∫ßu m·ªõi")
    
    except Exception as e:
        logger.error(f"L·ªói khi ki·ªÉm tra g√≥i th·∫ßu: {str(e)}")
    
    finally:
        driver.quit()

# H√†m g·ª≠i heartbeat
def send_heartbeat():
    bot = Bot(token=TELEGRAM_TOKEN)
    message = (
        f"üíì HEARTBEAT BOT\n"
        f"üïê {datetime.now().strftime('%H:%M:%S - %d/%m/%Y')}\n"
        f"üìä ƒê√£ theo d√µi: {len(json.load(open(BIDDINGS_FILE))) if os.path.exists(BIDDINGS_FILE) else 0} g√≥i th·∫ßu\n"
        f"üîÑ Ki·ªÉm tra ti·∫øp theo: {CHECK_INTERVAL_MINUTES} ph√∫t\n"
        f"‚úÖ Bot ƒëang ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng"
    )
    bot.send_message(chat_id=CHAT_ID, text=message)

# H√†m c√¥ng vi·ªác ƒë·ªãnh k·ª≥
def scheduled_job():
    if is_within_working_hours():
        logger.info("ƒêang ki·ªÉm tra g√≥i th·∫ßu...")
        check_biddings()
    else:
        logger.info("Bot ngh·ªâ - ngo√†i khung gi·ªù 8:00 - 20:00")

def main():
    # G·ª≠i th√¥ng b√°o kh·ªüi ƒë·ªông
    bot = Bot(token=TELEGRAM_TOKEN)
    message = (
        f"ü§ñ BOT THEO D√ïI G√ìI TH·∫¶U ƒê√É KH·ªûI ƒê·ªòNG\n"
        f"üïê Th·ªùi gian kh·ªüi ƒë·ªông: {datetime.now().strftime('%H:%M:%S - %d/%m/%Y')}\n"
        f"‚è±Ô∏è Ki·ªÉm tra m·ªói: {CHECK_INTERVAL_MINUTES} ph√∫t\n"
        f"üéØ T·ª´ kh√≥a t√¨m ki·∫øm: Chi·∫øu s√°ng\n"
        f"‚úÖ Bot ƒëang ho·∫°t ƒë·ªông v√† s·∫µn s√†ng theo d√µi g√≥i th·∫ßu m·ªõi!"
    )
    bot.send_message(chat_id=CHAT_ID, text=message)
    
    # Kh·ªüi t·∫°o scheduler
    scheduler = BlockingScheduler()
    
    # Th√™m c√¥ng vi·ªác ki·ªÉm tra g√≥i th·∫ßu
    scheduler.add_job(scheduled_job, 'interval', minutes=CHECK_INTERVAL_MINUTES)
    
    # Th√™m c√¥ng vi·ªác heartbeat (m·ªói 12 gi·ªù)
    scheduler.add_job(send_heartbeat, 'interval', hours=12)
    
    # B·∫Øt ƒë·∫ßu scheduler
    logger.info("Kh·ªüi ƒë·ªông scheduler...")
    scheduler.start()

if __name__ == "__main__":
    main()
